import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import os
import time
from PIL import Image
import io
import logging
import zipfile
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API —Ç–æ–∫–µ–Ω
API_TOKEN = '7067233375:AAEVxtJ91HWZfpttqTouMjTzX8JePKE8HkI'
bot = telebot.TeleBot(API_TOKEN)

def setup_ublock():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é uBlock Origin"""
    extensions_dir = os.path.join(os.getcwd(), 'extensions')
    if not os.path.exists(extensions_dir):
        os.makedirs(extensions_dir)
    
    ublock_zip_path = os.path.join(extensions_dir, 'ublock.zip')
    ublock_dir = os.path.join(extensions_dir, 'ublock')
    
    ublock_url = "https://github.com/gorhill/uBlock/releases/download/1.60.1rc4/uBlock0_1.60.1rc4.chromium.zip"
    
    try:
        if not os.path.exists(ublock_dir):
            logger.info("–°–∫–∞—á–∏–≤–∞–µ–º uBlock Origin...")
            response = requests.get(ublock_url)
            response.raise_for_status()
            
            with open(ublock_zip_path, 'wb') as f:
                f.write(response.content)
            
            logger.info("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º uBlock Origin...")
            with zipfile.ZipFile(ublock_zip_path, 'r') as zip_ref:
                zip_ref.extractall(ublock_dir)
            
            os.remove(ublock_zip_path)
            logger.info("uBlock Origin —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.info("uBlock Origin —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ uBlock Origin: {e}")
        return None
    
    return ublock_dir

def init_driver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome —Å –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–æ–º —Ä–µ–∫–ª–∞–º—ã"""
    ublock_path = setup_ublock()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    if ublock_path:
        chrome_options.add_argument(f"--load-extension={ublock_path}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã
    chrome_options.add_argument('--disable-popup-blocking')
    chrome_options.add_argument('--disable-notifications')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    chrome_options.add_experimental_option("prefs", {
        "profile.default_content_setting_values": {
            "ads": 2,
            "notifications": 2,
            "popups": 2
        }
    })
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    blocked_domains = [
        "'*googlesyndication.com*'",
        "'*googleadservices.com*'",
        "'*doubleclick.net*'",
        "'*google-analytics.com*'",
        "'*adnxs.com*'",
        "'*advertising.com*'"
    ]
    chrome_options.add_argument('--host-rules=' + ','.join(['MAP ' + domain + ' 127.0.0.1' for domain in blocked_domains]))
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    # –í–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–µ–∫–ª–∞–º–Ω—ã—Ö URL —á–µ—Ä–µ–∑ CDP
    driver.execute_cdp_cmd('Network.setBlockedURLs', {"urls": [
        "*googlesyndication.com*",
        "*googleadservices.com*",
        "*doubleclick.net*",
        "*google-analytics.com*",
        "*adnxs.com*",
        "*advertising.com*"
    ]})
    driver.execute_cdp_cmd('Network.enable', {})
    
    return driver

def is_cadastral_number(text):
    return ':' in text and any(char.isdigit() for char in text) and not text.startswith(('http://', 'https://'))

def is_coordinates(text):
    parts = text.split(',')
    if len(parts) != 2:
        return False
    try:
        lat, lon = float(parts[0]), float(parts[1])
        return -90 <= lat <= 90 and -180 <= lon <= 180
    except ValueError:
        return False

def get_location_info(lat, lon, driver):
    try:
        driver.get("https://gps-coordinates.org/")
        
        lat_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "latitude"))
        )
        lat_input.clear()
        lat_input.send_keys(str(lat))
        
        lon_input = driver.find_element(By.ID, "longitude")
        lon_input.clear()
        lon_input.send_keys(str(lon))
        
        button = driver.find_element(By.ID, "btnGetAddressByCoordinates")
        button.click()
        
        time.sleep(2)
        
        address_input = driver.find_element(By.ID, "address")
        address = address_input.get_attribute("value")
        
        map_element = driver.find_element(By.ID, "map")
        screenshot = map_element.screenshot_as_png
        
        return {
            'address': address,
            'screenshot': screenshot
        }
    except Exception as e:
        logger.error(f"Error in get_location_info: {str(e)}")
        return None

@bot.message_handler(commands=['geoint'])
def request_input(message):
    markup = InlineKeyboardMarkup()
    button_coordinates = InlineKeyboardButton("–ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú", callback_data="request_coordinates")
    button_cadastral = InlineKeyboardButton("–ö–ê–î–ê–°–¢–†–û–í–´–ô –ù–û–ú–ï–† üá∫üá¶", callback_data="request_cadastral")
    markup.add(button_coordinates)
    markup.add(button_cadastral)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–≤–æ–¥–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "request_coordinates")
def callback_coordinates(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:  40.75926,-73.98052\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ Google Maps, –∑–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Ö")

@bot.callback_query_handler(func=lambda call: call.data == "request_cadastral")
def callback_cadastral(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Å–∞–π—Ç kadastr.live, –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç –∏ –Ω–∞–π—Ç–∏ '–ù–æ–º–µ—Ä' –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –º–Ω–µ")

@bot.message_handler(func=lambda message: is_coordinates(message.text))
def handle_coordinates(message):
    coordinates = message.text.strip()
    lat, lon = map(float, coordinates.split(','))

    driver = init_driver()
    try:
        location_info = get_location_info(lat, lon, driver)

        if location_info:
            photo = io.BytesIO(location_info['screenshot'])
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞—Ä—Ç
            google_maps_url = f"https://www.google.com/maps?ll={lat},{lon}&q={lat},{lon}&hl=en&t=m&z=15"
            bing_maps_url = f"https://www.bing.com/maps/?v=2&cp={lat}~{lon}&style=r&lvl=15&sp=Point.{lat}_{lon}____"
            apple_maps_url = f"https://maps.apple.com/maps?ll={lat},{lon}&q={lat},{lon}&t=m"
            yandex_maps_url = f"https://maps.yandex.com/?ll={lon},{lat}&spn=0.01,0.01&l=sat,skl&pt={lon},{lat}"
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("Google Maps", url=google_maps_url),
                InlineKeyboardButton("Bing Maps", url=bing_maps_url),
                InlineKeyboardButton("Apple Maps", url=apple_maps_url),
                InlineKeyboardButton("Yandex Maps", url=yandex_maps_url)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞–¥—Ä–µ—Å–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            bot.send_photo(
                message.chat.id,
                photo,
                caption=f"üìç –ê–¥—Ä–µ—Å: {location_info['address']}\n\n–ü–æ –¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
                reply_markup=markup
            )
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {str(e)}")
    finally:
        driver.quit()

    send_photos_with_buttons(message.chat.id, lat, lon)

def send_photos_with_buttons(chat_id, lat, lon):
    # –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # ... [–í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ send_photos_with_buttons –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ]
    image_url = "https://i.postimg.cc/t4LXnfqX/1000474879.png"
    caption = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:"
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("Arcgis", url=f"https://livingatlas.arcgis.com/wayback/#localChangesOnly=true&ext={lon},{lat},{lon},{lat}"),
        InlineKeyboardButton("EarthEngine", url=f"https://earthengine.google.com/timelapse/#v={lat},{lon},15,latLng&t=3.04"),
        InlineKeyboardButton("Sentinel", url=f"https://apps.sentinel-hub.com/sentinel-playground/?source=S2L2A&lat={lat}&lng={lon}")
    )
    bot.send_photo(chat_id, image_url, caption=caption, reply_markup=markup)
    
    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...
    # [–û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ send_photos_with_buttons –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

@bot.message_handler(func=lambda message: is_cadastral_number(message.text))
def handle_cadastral_number(message):
    cadastral_number = message.text.strip()
    url = f'https://opendatabot.ua/l/{cadastral_number}?from=search'
    bot.send_message(message.chat.id, f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É: {cadastral_number}")
    
    driver = init_driver()
    try:
        driver.get(url)
        time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = driver.get_screenshot_as_png()
        photo = io.BytesIO(screenshot)
        bot.send_photo(message.chat.id, photo, caption=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É {cadastral_number}")
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É.")
        logger.error(f"Error in handle_cadastral_number: {str(e)}")
    finally:
        driver.quit()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
